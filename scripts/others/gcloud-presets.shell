#!/bin/bash

# File: scripts/others/gloud-presets.shell
# Version: 0.1.0

# Description:
#   Ensures required Google Cloud APIs are enabled and access permissions are set
#   for HTTP-triggered Cloud Functions v2 (Cloud Run-based).
#   This is safe to run multiple times (idempotent).

set -eou pipefail ;
# set -x ;

# -----------------------------------------------------------------------------#

GCP_PROJECT_ID="${GCP_PROJECT_ID:-$(gcloud config get-value project)}"
if [[ -z "${GCP_PROJECT_ID}" ]]; then
  echo >&2 "Error: GCP_PROJECT_ID could not be resolved. Set it manually or fix your gcloud config."
  exit 1
fi

## Parse parameters
prefix="${1:-dev}"
gcp_region="${2:-us-west2}"

if [[ -z "${CLOUD_FUNCTION_NAME:-}" ]]; then
  echo "Warning: CLOUD_FUNCTION_NAME not set; using fallback: ${SERVICE_NAME}"
fi

SERVICE_NAME="${CLOUD_FUNCTION_NAME:-${prefix}--webapp-stress-tester}"
TIMEOUT=60

REQUIRED_APIS=(
  cloudfunctions.googleapis.com
  cloudbuild.googleapis.com
  eventarc.googleapis.com
  run.googleapis.com
)

echo "Project: ${GCP_PROJECT_ID}"
echo "Region:  ${gcp_region}"
echo "Function: ${SERVICE_NAME}"
echo ""

enable_api() {
  local api=$1
  echo "Ensuring API enabled: $api"
  if ! gcloud services list --enabled --project="${GCP_PROJECT_ID}" | grep -q "$api"; then
    gcloud services enable "$api" --project="${GCP_PROJECT_ID}"
    if [[ $? -ne 0 ]]; then
      echo >&2 "Failed to enable API: $api"
      exit 1
    fi
    echo "Waiting for $api to activate..."
    # for i in $(seq 1 "${TIMEOUT}"); do
    for ((i=1; i<=TIMEOUT; i++)); do
      sleep 1
      if gcloud services list --enabled --project="${GCP_PROJECT_ID}" | grep -q "$api"; then
        echo "API enabled: $api"
        return
      fi
    done
    echo "Timeout waiting for API: $api"
    exit 1
  else
    echo "Already enabled: $api"
  fi
}

for api in "${REQUIRED_APIS[@]}"; do
  enable_api "$api"
done

# Ensure service exists before checking IAM
if ! gcloud run services describe "${SERVICE_NAME}" --region "${gcp_region}" --project "${GCP_PROJECT_ID}" &>/dev/null; then
  echo >&2 "Error: Cloud Run service '${SERVICE_NAME}' does not exist in region '${gcp_region}'."
  exit 1
fi

echo ""
echo "Checking Cloud Run public access for: ${SERVICE_NAME}"

# if gcloud run services get-iam-policy "${SERVICE_NAME}" --region "${gcp_region}" --project "${GCP_PROJECT_ID}" \
#   | grep -q "allUsers.*roles/run.invoker"; then
#   echo "Public access already granted"
if gcloud run services get-iam-policy "${SERVICE_NAME}" \
    --region "${GCP_REGION}" \
    --project "${GCP_PROJECT_ID}" \
    --format="json" \
  | jq -e '.bindings[]? | select(.role=="roles/run.invoker") | .members[]?' \
  | grep -q "allUsers"; then
  echo "Public access already granted"
else
  echo "Granting public invoker permission..."
  gcloud run services add-iam-policy-binding "${SERVICE_NAME}" \
    --region "${gcp_region}" \
    --project "${GCP_PROJECT_ID}" \
    --member="allUsers" \
    --role="roles/run.invoker"
  echo "Public access granted"
fi

echo ""
echo "Prerequisites completed. You may now deploy and invoke the Cloud Function."
