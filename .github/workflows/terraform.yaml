# File: .github/workflows/terraform.yaml
# Version: 0.1.0

name: Terraform GCP CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:

      target_environment:
        description: "Deployment environment"
        required: false
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

      custom_environment:
        description: "Adhoc environment (e.g. 030125-nightly)"
        required: false
        default: ""

      action:
        description: "Terraform action to perform"
        required: false
        default: "validate"
        type: choice
        options:
          - validate
          - plan
          - apply
          - destroy

      execute_stressload:
        description: "Stressload Autoscaling service"
        required: false
        default: false
        type: boolean

      logging_level:
        description: "Terraform logging verbosity"
        required: false
        default: "INFO"
        type: choice
        options:
          - TRACE
          - DEBUG
          - INFO
          - WARN
          - ERROR
          - OFF

jobs:

  terraform:
    runs-on: ubuntu-latest

    env:

      GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/credentials.json
      PROJECT_CONFIG_FILE: project.json

      # TF_WORKSPACE: ${{ github.event.inputs.target_environment }}
      TF_LOG: ${{ github.event.inputs.logging_level }}

    steps:

      - name: Checkout Repository
        id: checkout_repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        id: setup_terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - name: Decode GCP Credentials (base64 â†’ JSON)
        id: decode_credentials
        run: |

          printf "%s" "${{ secrets.GCP_CREDENTIALS }}" | base64 --decode > ${GOOGLE_APPLICATION_CREDENTIALS} ;

      - name: Determine Effective Environment
        id: active_environment
        run: |

          custom_environment="${{ github.event.inputs.custom_environment }}" ;
          default_environment="${{ github.event.inputs.target_environment }}" ;

          # Use custom if defined
          if [[ -n "${custom_environment}" ]]; then
                  echo "Effective environment (custom): ${custom_environment}" ;
                  echo "TARGET_ENVIRONMENT=${custom_environment}" >> $GITHUB_ENV ;
            else  echo "Effective environment (default): ${default_environment}" ;
                  echo "TARGET_ENVIRONMENT=${default_environment}" >> $GITHUB_ENV ;
          fi ;

          echo "TF_WORKSPACE=${TARGET_ENVIRONMENT}" >> $GITHUB_ENV ;

      - name: Extract Workflow Globals (PROJECT_ID, REGION, etc.)
        id: workflow_globals
        run: |

          # target_environment="${{ github.event.inputs.target_environment }}" ;
          target_environment="${{ env.TARGET_ENVIRONMENT }}" ;

          # Extract project ID from the credentials file
          project_id=$(
            jq -r .project_id "${GOOGLE_APPLICATION_CREDENTIALS}"
          ) ;

          # Load paths and filenames from project configuration file
          provider=$(
            jq -r '.default' ${PROJECT_CONFIG_FILE}
          ) ;

          projects_path=$(
            jq -r '.configs.projects.path' ${PROJECT_CONFIG_FILE}
          ) ;
          project_config_file=$(
            jq -r --arg provider "${provider}" '.configs.projects.sets[$provider]' ${PROJECT_CONFIG_FILE}
          ) ;
          project_config_path="${projects_path}/${project_config_file}" ;

          targets_path=$(
            jq -r '.configs.targets.path' ${PROJECT_CONFIG_FILE}
          ) ;
          # targets_config_file=$(
          #   jq -r --arg env "$target_environment" '.configs.targets.sets[$env]' ${PROJECT_CONFIG_FILE}
          # ) ;
          # targets_config_path="${targets_path}/${targets_config_file}" ;

          targets_config_file=$(
            jq -r --arg env "$target_environment" '.configs.targets.sets[$env] // empty' ${PROJECT_CONFIG_FILE}
          ) ;
          # If not found in config, fallback to synthetic object
          if [ -z "$targets_config_file" ]; then
                  echo "Adhoc environment detected. Using empty targets config." ;
                  echo '{}' > .adhoc-target.json ;
                  targets_config_path=".adhoc-target.json" ;
            else  targets_config_path="${targets_path}/${targets_config_file}" ;
          fi ;

          # Extract abstract region from target config
          abstract_region=$(
            jq -r '.region' "$targets_config_path"
          ) ;

          # Resolve actual cloud region from project config
          region=$(
            jq -r --arg key "${abstract_region}" '.regions[$key]' "${project_config_path}"
          ) ;

          # Resolve forwarding rule name from project config and inject the environment prefix
          forwarding_rule_base=$(
            jq -r '.services.http_forwarding.name' "${project_config_path}"
          ) ;
          forwarding_rule_name="${target_environment}--${forwarding_rule_base}" ;

          # Export to GitHub Actions environment
          echo "PROJECT_ID=${project_id}" >> $GITHUB_ENV ;
          echo "REGION=${region}" >> $GITHUB_ENV ;
          echo "FORWARDING_RULE_NAME=${forwarding_rule_name}" >> $GITHUB_ENV ;

      - name: Install Google Cloud SDK (quiet)
        id: install_gcloudsdk
        run: |

          {
            sudo apt-get update && sudo apt-get install -y curl unzip jq
            curl -sSL https://sdk.cloud.google.com | bash -s -- --disable-prompts
            source $HOME/google-cloud-sdk/path.bash.inc
            gcloud version
          } > gcloud-sdk-install.log 2>&1 ;

      - name: Upload gcloud install log
        id: upload_setuplog
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gcloud-sdk-install-log
          path: gcloud-sdk-install.log

      - name: Authenticate GCP Service Account
        id: authenticate_account
        run: |

          gcloud auth activate-service-account --key-file="${GOOGLE_APPLICATION_CREDENTIALS}" ;

      - name: Set GCP Project from credentials.json
        id: project_crendentials
        run: |

          gcloud config set project "${{ env.PROJECT_ID }}" ;

      - name: GCP Environment Diagnostics
        id: environment_diagnostics
        run: |

          echo -e "\n>>> gcloud auth list (JSON)" ;
          gcloud auth list --format=json ;

          echo -e "\n>>> gcloud config list (JSON)" ;
          gcloud config list --format=json ;

          echo -e "\n>>> gcloud projects describe (${{ env.PROJECT_ID }})" ;
          gcloud projects describe "${{ env.PROJECT_ID }}" ;

      - name: GCP Compute - Project Information
        id: compute_project_info
        run: |

          echo -e "\n>>> gcloud compute project-info describe (JSON)" ;
          gcloud compute project-info describe --format=json | jq '.quotas = []' ;

      - name: GCP Compute - Regions/Zones
        id: compute_regions_zones
        run: |

          echo -e "\n>>> gcloud compute regions (${{ env.REGION }}) list (filtered)" ;
          gcloud compute regions list --format=json | jq --arg region "${{ env.REGION }}" 'map(select(.name == $region) | .quotas = [])' ;

          echo -e "\n>>> gcloud compute zones (${{ env.REGION }}) list (filtered)" ;
          gcloud compute zones list --filter="region:(${ env.REGION })" --format=json | jq . ;

      - name: GCP Compute - Networks
        id: compute_networks
        run: |

          echo -e "\n>>> gcloud compute networks list (JSON)" ;
          gcloud compute networks list --format=json \
               | jq --arg region "${{ env.REGION }}" 'map(.subnetworks |= map(select(test("/regions/" + $region + "/"))))' ;

      - name: GCP Compute - Instances
        id: compute_instances
        run: |

          echo -e "\n>>> gcloud compute instances list (JSON)" ;
          gcloud compute instances list --format=json || echo -e "No instances" ;

      - name: GCP Services Listing
        id: gcloud_services
        run: |

          echo -e "\n>>> gcloud services list --enabled (JSON)" ;
          gcloud services list --enabled --format=json || echo -e "No enabled services" ;

      - name: GCP Service-Accounts Listing
        id: service_accounts
        run: |

          echo -e "\n>>> gcloud iam service-accounts list (JSON)" ;
          gcloud iam service-accounts list --format=json || echo -e "No service accounts found" ;

      - name: Prepare Backend and Workspace
        id: prepare_backend
        run: |

          # Resolve backend setup script path from project configuration file
          backend_path=$(
            jq -r '.scripts.manage.terraform-backend.path' ${PROJECT_CONFIG_FILE}
          ) ;
          backend_script_name=$(
            jq -r '.scripts.manage.terraform-backend.script' ${PROJECT_CONFIG_FILE}
          ) ;
          backend_script="${backend_path}/${backend_script_name}" ;

          chmod +x $backend_script ;
          echo "Checking for backend bucket..." ;
          if ! ${backend_script}; then
                  echo "Bucket does not exist. Creating it now..." ;
                  ${backend_script} --create ;
            else  echo "Bucket exists. Continuing..." ;
          fi ;

      - name: Initializing Terraform
        id: initialize_terraform
        run: |

          echo -e "Running terraform init..." ;
          terraform init ;

      - name: Configuring Terraform Workspace
        id: configure_workspace
        run: |

          target_environment="${{ github.event.inputs.target_environment }}" ;

          # Optional: Validate target environment exists in project configuration file
          target_config_exists=$(
            jq -e --arg env "${target_environment}" '.configs.targets.sets[$env] // empty' ${PROJECT_CONFIG_FILE}
          ) ;

          if [ -z "$target_config_exists" ]; then
            echo "Error: target environment '${target_environment}' not defined in ${PROJECT_CONFIG_FILE}" ;
            exit 1 ;
          fi ;

          current_workspace=$(terraform workspace show || echo "default") ;
          echo "Current workspace: ${current_workspace}" ;

          if [ "${current_workspace}" = "default" ]; then
                  echo "Switching from 'default' to workspace: ${target_environment}" ;
                  if terraform workspace list | grep -q "${target_environment}"; then
                          terraform workspace select "${target_environment}" ;
                    else  terraform workspace new "${target_environment}" ;
                  fi ;
            else  echo "Workspace is already set: ${current_workspace}" ;
          fi ;

      - name: Terraform Validate
        id: validate_terraform
        if: ${{ github.event.inputs.action != 'validate' }}
        run: |

          terraform validate ;

      - name: Terraform Plan
        id: plan_terraform
        if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' }}
        run: |

          TF_LOG=${{ github.event.inputs.logging_level }} terraform plan -lock=false -out=tfplan ;

      - name: Terraform Apply
        id: apply_terraform
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |

          TF_LOG=${{ github.event.inputs.logging_level }} terraform apply -auto-approve tfplan ;

      - name: Inspect Load Balancer Services
        id: loadbalancer_services
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |

          # Resolve inspect-services script path from project configuration file
          inspect_path=$(
            jq -r '.scripts.manage.inspect-services.path' ${PROJECT_CONFIG_FILE}
          ) ;
          inspect_script=$(
            jq -r '.scripts.manage.inspect-services.script' ${PROJECT_CONFIG_FILE}
          ) ;
          inspect_services="${inspect_path}/${inspect_script}" ;

          chmod +x ${inspect_services} ;
          ${inspect_services} "${{ env.FORWARDING_RULE_NAME }}" ;

      - name: Evaluate Stressload Condition
        id: evaluate_stressload
        run: |
          if [[ "${{ github.event.inputs.execute_stressload }}" == "true" && "${{ github.event.inputs.action }}" == "apply" ]]; then
              echo "EXECUTE_STRESSLOAD=true" >> $GITHUB_ENV ;
              echo "Stressload test is enabled."
          else
              echo "EXECUTE_STRESSLOAD=false" >> $GITHUB_ENV ;
              echo "Stressload test is skipped."
          fi ;

      - name: Execute Stressload Autoscaling Service
        id: execute_stressload
        if: ${{ env.EXECUTE_STRESSLOAD == 'true' }}
        run: |

          echo "Running stressload test with 'hey'..."

          forwarding_ip=$(
            gcloud compute forwarding-rules describe "${{ env.FORWARDING_RULE_NAME }}" \
              --region="${{ env.REGION }}" \
              --format="value(IPAddress)"
          ) ;

          echo "Resolved Load Balancer IP: ${forwarding_ip}" ;

          # Install hey if not present
          sudo apt-get update -qq && sudo apt-get install -y golang-go ;

          go install github.com/rakyll/hey@latest ;
          export PATH=$PATH:$(go env GOPATH)/bin ;

          # Perform the stress test: 15s load, 15s idle, 15s for scale down, 15s more to observe
          hey -z 15s -c 100 "http://${forwarding_ip}" ;
          sleep 15 ;
          echo "Waiting for scale down..." ;
          sleep 30 ;

      - name: Evaluate State Backup Condition
        id: destroy_tfstate
        run: |

          if [[ "${{ github.event.inputs.action }}" == "destroy" && "${{ github.event.inputs.target_environment }}" == "dev" ]]; then
                  echo -e "DESTROY_TFSTATE=true" >> $GITHUB_ENV ;
            else  echo -e "DESTROY_TFSTATE=false" >> $GITHUB_ENV ;
          fi ;

      - name: Download Terraform State Files (Backup)
        id: download_tfstate
        if: ${{ env.DESTROY_TFSTATE == 'true' }}
        run: |

          backend_path=$(
            jq -r '.scripts.manage["terraform-backend"].path' ${PROJECT_CONFIG_FILE}
          ) ;
          backend_script_name=$(
            jq -r '.scripts.manage["terraform-backend"].script' ${PROJECT_CONFIG_FILE}
          ) ;
          backend_script="${backend_path}/${backend_script_name}" ;

          chmod +x ${backend_script} ;
          ${backend_full} --download ;

      - name: Upload Terraform State Backup
        id: upload_tfstate
        if: ${{ env.DESTROY_TFSTATE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-backup-${{ github.run_id }}
          path: .local/

      - name: Terraform Destroy
        id: destroy_terraform
        # if: ${{ github.event.inputs.action == 'destroy' }}
        if: ${{ env.DESTROY_TFSTATE == 'true' }}
        run: |

          TF_LOG=${{ github.event.inputs.logging_level }} terraform destroy -auto-approve ;
